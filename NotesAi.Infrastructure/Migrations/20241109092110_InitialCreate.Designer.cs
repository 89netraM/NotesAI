// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotesAi.Infrastructure.Db;

#nullable disable

namespace NotesAi.Infrastructure.Migrations
{
    [DbContext(typeof(DocumentDbContext))]
    [Migration("20241109092110_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1");

            modelBuilder.Entity("NotesAi.Infrastructure.Db.DbDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LatestUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NotesAi.Infrastructure.Db.DbDocument", b =>
                {
                    b.OwnsOne("NotesAi.Infrastructure.Db.DbMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("DbDocumentId")
                                .HasColumnType("TEXT");

                            b1.HasKey("DbDocumentId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DbDocumentId");

                            b1.OwnsMany("NotesAi.Infrastructure.Db.DbMetadataProperty", "Properties", b2 =>
                                {
                                    b2.Property<Guid>("DocumentId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Key")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("DocumentId", "Key");

                                    b2.ToTable("DbMetadataProperty");

                                    b2.WithOwner()
                                        .HasForeignKey("DocumentId");
                                });

                            b1.Navigation("Properties");
                        });

                    b.OwnsMany("NotesAi.Infrastructure.Db.DbParagraph", "Paragraphs", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("DocumentId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Index")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("DocumentId", "Index")
                                .IsUnique();

                            b1.ToTable("DbParagraph");

                            b1.WithOwner()
                                .HasForeignKey("DocumentId");

                            b1.OwnsOne("NotesAi.Infrastructure.Db.DbParagraphVector", "Vector", b2 =>
                                {
                                    b2.Property<int>("RowId")
                                        .HasColumnType("INTEGER")
                                        .HasColumnName("rowid");

                                    b2.Property<byte[]>("Embedding")
                                        .IsRequired()
                                        .HasColumnType("BLOB")
                                        .HasColumnName("embedding");

                                    b2.HasKey("RowId");

                                    b2.ToTable("DbParagraphVector", null, t =>
                                        {
                                            t.ExcludeFromMigrations();
                                        });

                                    b2.WithOwner()
                                        .HasForeignKey("RowId");
                                });

                            b1.Navigation("Vector")
                                .IsRequired();
                        });

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Paragraphs");
                });
#pragma warning restore 612, 618
        }
    }
}
